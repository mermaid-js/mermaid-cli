name: 'Build, test and deploy mermaid-cli Docker image'
on: [push,pull_request]
jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DOCKERFILE: DockerfileBuild
      IMAGENAME: mermaid-cli
      DOCKER_IO_REPOSITORY: minlag/mermaid-cli
      INPUT_DATA: test-positive
      PERCY_TOKEN: ${{secrets.PERCY_TOKEN}}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Convert repository name to lower case
      run: echo "::set-env name=GITHUB_REPOSITORY_LOWER_CASE::$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')"

    - name: Get release version
      run: echo ::set-env name=RELEASE_VERSION::$(echo ${GITHUB_SHA} | cut -c1-6)

    - name: Create image tag
      run: echo "::set-env name=IMAGETAG::${{env.GITHUB_REPOSITORY_LOWER_CASE}}/$IMAGENAME:${{env.RELEASE_VERSION}}"

    - name: Docker build
      run: docker build -t ${{env.IMAGETAG}} . -f $DOCKERFILE
 
    - name: Test if the CLI actually works
      run: for i in $(ls $INPUT_DATA/*.mmd); do docker run -v $(pwd):/data ${{env.IMAGETAG}} -i /data/$i -o /data/$i.png; done
     
    - name: Upload diagrams for manual inspection
      uses: actions/upload-artifact@v1
      with:
        name: output
        path: ./${{env.INPUT_DATA}}

    - name: Upload diagrams for automatic inspection
      run: docker run -v ${{env.INPUT_DATA}}:/app -e PERCY_TOKEN=${{env.PERCY_TOKEN}} percyio/agent ls -la /app && percy upload /app

    - name: Publish to Github Registry
      uses: elgohr/Publish-Docker-Github-Action@2.17
      with:
        name: ${{env.GITHUB_REPOSITORY_LOWER_CASE}}/${{env.IMAGENAME}}
        username: $GITHUB_ACTOR
        password: ${{secrets.GITHUB_TOKEN}}
        registry: docker.pkg.github.com
        dockerfile: ${{env.DOCKERFILE}}
        snapshot: true
        tags: "latest,${{env.RELEASE_VERSION}}"

    - name: Publish to Docker.io Registry
      uses: elgohr/Publish-Docker-Github-Action@2.17
      with:
        name: ${{env.DOCKER_IO_REPOSITORY}}
        username: ${{secrets.DOCKER_USERNAME}}
        password: ${{secrets.DOCKER_PASSWORD}}
        dockerfile: ${{env.DOCKERFILE}}
        snapshot: true
        tags: "latest,${{env.RELEASE_VERSION}}"  
